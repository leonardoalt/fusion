import "hashes/poseidon/poseidon" as hash;

from "./types" import DEPTH, Tx, Account;

def select(bool condition, field left, field right) -> (field, field) {
	return (condition ? right : left, condition ? left : right);
}

def merge(field v0, field v1) -> field {
	return if v0 == 0 && v1 == 0 {
		0
	} else { if v0 == 0 {
		v1
	} else { if v1 == 0 {
		v0
	} else {
		hash([v0, v1])
	}}};
}

def hash_leaf(Account acc) -> field {
	return if acc.balance == 0 && acc.nonce == 0 {
		0
	} else {
		hash([acc.id, hash([acc.balance, acc.nonce])])
	};
}

// Merke-Tree inclusion proof for tree depth 256 using Poseidon.
// directionSelector => true if current digest is on the rhs of the hash
def verify_merkle_path(field root, field leaf, bool[DEPTH] directionSelector, field[DEPTH] path) -> bool {
	// Start from the leaf
	field mut digest = leaf;

	// Loop up the tree
	for u32 i in 0..DEPTH {
		(field, field) s = select(directionSelector[i], digest, path[i]);
		digest = merge(s.0, s.1);
	}

	return digest == root;
}

def main(field preRoot, field postRoot, Tx tx, Account[2] preAccounts, bool[2][DEPTH] directionSelector, field[2][DEPTH] prePath, field[2][DEPTH] postPath) -> bool {
	// Verify current state

	bool mut acc = true;

	//Verify pre state `sender` account for all transactions.
	acc = acc && verify_merkle_path(preRoot, hash_leaf(preAccounts[0]), directionSelector[0], prePath[0]);
	assert(acc);
	// Only verify pre state `to` account for Transfer transactions.
	acc = acc && if tx.kind == 0 { verify_merkle_path(preRoot, hash_leaf(preAccounts[1]), directionSelector[1], prePath[1]) } else { true };
	assert(acc);

	// Apply tx changes //

	// Verify pre state `sender` account for all transactions.
	acc = acc && hash([tx.sender.x, tx.sender.y]) == preAccounts[0].id;
	assert(acc);
	// Only verify pre state `to` account for Transfer transactions.
	acc = acc && if tx.kind == 0 { hash([tx.to.x, tx.to.y]) == preAccounts[1].id } else { true };
	assert(acc);

	// Do not verify balance of `sender` account for Deposit transactions.
	acc = acc && if tx.kind == 1 { true } else { (preAccounts[0].balance >= tx.value) };
	assert(acc);
	// Always verify nonce for `sender`.
	acc = acc && (preAccounts[0].nonce < tx.nonce);
	assert(acc);

	// Decrease the balance of `sender` account for Transfer and Withdraw transactions.
	// Increase the balance of `sender` account for Deposit transactions.
	Account postAccountSender = Account {
		id: preAccounts[0].id,
		balance: if tx.kind == 1 { preAccounts[0].balance + tx.value } else { preAccounts[0].balance - tx.value},
		nonce: tx.nonce
	};

	// Only increase the balance of `to` account for Transfer transactions.
	Account postAccountRecipient = if tx.kind == 0 { Account {
		id: preAccounts[1].id,
		balance: preAccounts[1].balance + tx.value,
		nonce: preAccounts[1].nonce
	}} else {
		preAccounts[1]
	};

	//////////////////

	// Verify new state

	// Verify post state `sender` account for all transactions.
	acc = acc && verify_merkle_path(postRoot, hash_leaf(postAccountSender), directionSelector[0], postPath[0]);
	assert(acc);
	// Only verify post state `to` account for Transfer transactions.
	acc = acc && if tx.kind == 0 { verify_merkle_path(postRoot, hash_leaf(postAccountRecipient), directionSelector[1], postPath[1]) } else { true };
	assert(acc);

	return acc;
}
